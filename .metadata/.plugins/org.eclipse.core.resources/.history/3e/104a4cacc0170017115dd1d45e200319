import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;

public class graph {
	int vertices;
	int edge;
	ArrayList<Edge>[] adj;
	
	public graph(int vertices){
		this.vertices = vertices;
		this.edge = 0;
		adj = new ArrayList[vertices + 1];
		for (int i = 1; i <= vertices; i++ ){
			adj[i] = new ArrayList<Edge>();
		}
	}
	public void addEdge(int start, int end, int weight){
		Edge e = new Edge(start, end);
		e.weight = weight;
		if (!this.adj[start].contains(e)){
			this.adj[start].add(e);
			this.adj[end].add(e);
			edge++;
		}
	}
	
	public int getWeight(int start, int end){
		int result = 0;
		ArrayList<Edge> list = adj[start];
		for (Edge e : list){
//			if the edge's end is equal to the parameter start, then compare the start with parameter end
			if (e.end == start){
				if (e.start == end){
					result = e.weight;
					break;
				}
			}else
//			means the edge's start is the parameter start;
			{
				if (e.end == end){
					result = e.weight;
					break;
				}
			}

		}
		return result;
	}
	public void addAllPath(int s, int t){
//		collect all the edge
		List<Edge> temp = new ArrayList<Edge>();
		int [] vs = new int[this.vertices +1];
		for (int i = 1; i <= this.vertices; i++){
			for (Edge e : this.adj[i]){
				temp.add(e);
			} 
		}
		Set<Edge> hs = new HashSet<Edge>();
		hs.addAll(temp);
		
// 		loop throught the vertices
		Random rand = new Random();
		
		for (int i  = 1; i <= this.vertices; i++){
			int start = i;
			int end = i+1;
			if (start == s || start == t) continue;
			if (end == s || end == t) {
				end++;
			}
			Edge e = new Edge(start,end);
			if (!hs.contains(e)){
				this.addEdge(start, end, rand.nextInt(100));
			}
		}
	}
}
	
