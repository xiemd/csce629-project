import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;

public class RoutingAlgo {
//	Max-Bandwidth-Path from djkstra's algorithm without heap
	public static void algo1(graph g, int s, int t){
//		initial the bandwidth, data and fringe array
		int[] bandwidth = new int[g.vertices + 1];
		int[] dad = new int[g.vertices + 1];
		int[] status = new int[g.vertices + 1];
		
		Arrays.fill(status, 0); //unseen = 0 , fringe = 1, in-tree = 2
		
//		initial the source and fringe
		dad[s] = 0;
		bandwidth[s] = 101;//the maximum weight i set is 100
		status[s] = 2;
		ArrayList<Edge> newfringe = g.adj[s];
		for(Edge e: newfringe){
			int end = e.end;
			if(s == e.end){
				end = e.start;
			}
			status[end] = 1;
			dad[end] = s;
			bandwidth[end] = g.getWeight(s, end);
		}
//		pick the maximum fringe, if the end vertex is unseen, put it in-tree, else update the vertex
		while (status[t] != 2){
			int maxFringe = findMax(bandwidth, status);
			status[maxFringe] = 2;
			ArrayList<Edge> list = g.adj[maxFringe];
			for (Edge e: list){
//				decide the end of the edge which is not the same as maxFringe
				int end = e.end;
				if(maxFringe == e.end){
					end = e.start;
				}
				
				int endWeight = Math.min(bandwidth[maxFringe], g.getWeight(maxFringe, end));
				
				if (status[end] == 0){
					status[end] = 1;
					dad[end] = maxFringe;
					bandwidth[end] = endWeight;

				}else if (status[end] == 1 && 
						endWeight > bandwidth[end])
				{
					dad[end] = maxFringe;
					bandwidth[end] = endWeight;
				}
			}
		}
		int k = t;
		
		System.out.println(k);
		while(dad[k] != 0){
			k = dad[k];
			System.out.println(k);
		}
		System.out.println("the bandwidth is " + bandwidth[t]);
	}

	
	//	Max-Bandwidth-Path from djkstra's algorithm with heap
	public static void algo2(graph g, int s, int t){
//		initial the bandwidth, data and fringe array
		int[] bandwidth = new int[g.vertices + 1];
		int[] dad = new int[g.vertices + 1];
		int[] status = new int[g.vertices + 1];
		maxHeap H = new maxHeap(g);

		
//		initial the source and fringe
		dad[s] = 0;
		bandwidth[s] = 101;
		status[s] = 2;
		ArrayList<Edge> newfringe = g.adj[s];
		for(Edge e: newfringe){
//			decide the end of the edge which is not the same as maxFringe
			int end = e.end;
			if(s == end){
				end = e.start;
			}
			status[end] = 1;
			dad[end] = s;
			bandwidth[end] = g.getWeight(s, end);
			H.insert(end, bandwidth[end]);
		}
//		pick the maximum fringe, if the end vertex is unseen, put it in-tree, else update the vertex
		while (status[t] != 2){
			int maxFringe = H.Maximum();
			H.delete(maxFringe);
			status[maxFringe] = 2;
			
			ArrayList<Edge> fringeList = g.adj[maxFringe];
			for (Edge e: fringeList){
				int end = e.end;
				if(maxFringe == e.end){
					end = e.start;
				}
				int endWeight = Math.min(bandwidth[maxFringe], g.getWeight(maxFringe, end));
				
				if (status[end] == 0) 
//				the vertex is unseen, just assign the endweight to the bandwidth[end]
				{
					status[end] = 1; 
					bandwidth[end] = endWeight;
					H.insert(end,bandwidth[end]);
					dad[end] = maxFringe;
				}
				else if (status[end] == 1 && 
						endWeight > bandwidth[end])
/* 				the vertex is already fringe and 
				new endweight larger than previous bandwidth*/
				{
					H.delete(end);
					dad[end] = maxFringe;
					bandwidth[end] = endWeight;
					H.insert(end,bandwidth[end]);
				}
			}
		}
		int k = t;
		System.out.println(k);
		while(dad[k] != 0){
			k = dad[k];
			System.out.println(k);
		}
		System.out.println("the bandwidth is " + bandwidth[t]);
		
	}
	
	//	Max-Bandwidth-Path from Kruskal algo
	public static void algo3(graph g, int s, int t){
		graph g1 = new graph(g.vertices);
		Edge[] result = new Edge[g.edge];
//		heap sort the edges increasingly 
		Edge[] edges = new Edge[g.edge];
		for (int i = 0; i < g.vertices; i++){
			for (Edge e : g.adj[i]){
				edges[i] = e;
			} 
		}
		HeapSort a = new HeapSort();
		Edge[] sorted_edges = a.sort(edges);
//		make set for all vertex
		int[] D = new int[g.vertices + 1]; //record vertex's root
		int[] R = new int[g.vertices + 1];	//record vertex's rank
		MakeSet(g.vertices, D, R);
//		pick the largest edge in order and union
		for (int i = g.vertices - 1; i>=0 ;i--){
			Edge e = edges[i];
			int r1 = Find(e.start,D);
			int r2 = Find(e.end,D);
			int j = i - g.vertices + 1;
			if ( r1 != r2 ){
				result[j++] = e;
				Union(R, D, r1, r2);
			}
		}
//		
	}
	
//	helper method for algo3 kruscal algorithm
	
	private static void MakeSet(int vertices, int[] D, int[] R){
		for (int i = 1; i <= vertices; i++){
			D[i] =  0;
			R[i] =  0;
			}
	}
	private static int Find(int vertex, int[] D){
		int cur = vertex;
		while(D[cur] != 0){
			cur = D[cur];		
		}
		return cur;
	}
	
	
	private static void Union(int[] R, int[] D, int u, int v){
		if (R[u] > R[v]){
			D[v] = u;
		}else if (R[u] < R[v]){
			D[u] = v;
		}else{
			D[v] = u;
			R[u]++;
		}
	}
	
	
	
//	helper method for algo1 for normal dijstra algorithm
	private static int findMax(int[] bandwidth, int[] status ){
		int index = 0;
		int max = 0;
		for (int i = 1; i < status.length;i++){
//			if the status is fringe,update the max
			if(status[i] == 1 && bandwidth[i] > max){
				index = i;
				max = bandwidth[i];
			}
		}
		return index;
	}
	
//helper method for get the path from source to destination in a graph in algo3
	private static void print(int s, int t, graph g){
		int[] dad =  BFS(s, t, g);
		int w = t;
		System.out.println(w);
		while(dad[w] != 0){
			w = dad[w];
			System.out.println(w);
		}
	}
	private static int[] BFS(int s, int t, graph g){
		LinkedList<Integer> queue = new LinkedList<Integer>();
		int[] dad = new int[g.vertices+1];
		int[] color = new int[g.vertices+1];
		int[] bandwidth = new int[g.vertices+1];
		Arrays.fill(color, 0);
		
		color[s] = 1;
		queue.add(s);
		bandwidth[s] = 101;  //larger than max weight
		while(queue.size() != 0){
			int u = queue.poll();
			if (u != t){
				for (Edge e : g.adj[u]){
					int end = e.end;
					if (end == u){
						end = e.start;
					}
					queue.add(end);
					color[end] = 1;
					dad[end] = u;
//					keep updating the path's bandwidth
					if(e.weight < bandwidth[u]){
						bandwidth[end] = e.weight;
					}else{
						bandwidth[end] = bandwidth[u];
					}
				}
			}
		}
		return dad;
	}
	
}
