
public class HeapSort {
	public Edge[] sort(Edge[] edges){
		int n = edges.length;
//		build the heap, bottom up style
		for (int i = n/2-1; i>=0; i--){
			heapify(edges, n, i);
		}
//		sort the edges
		for(int i = n-1; i<=0; i--){
//			swap the root to the end
			Edge temp = edges[0];
			edges[0] = edges[i];
			edges[i] = temp;
//			heapify the current root of the rest of array
			heapify(edges, i, 0);
		}
		return edges;
	}
//	only heapify subtree of i
	void heapify(Edge[] edges, int n, int i){
		int largest = i;
		int lson = 2*i;
		int rson = 2*i + 1;
//		compare with left son, update the largest index
		if (lson < n && edges[lson].weight > edges[largest].weight){
			largest = lson;
		}
//		compare with right son, update the largest index
		if (rson < n && edges[rson].weight > edges[largest].weight){
			largest = rson;
		}
//		swap i with the largest if i != largest
		if (largest != i){
			Edge temp = edges[i];
			edges[i] = edges[largest];
			edges[largest] =  temp;
//			recursively heapify the largest position and its affected subtree
			heapify(edges,n,largest);
		}	
	}
}
