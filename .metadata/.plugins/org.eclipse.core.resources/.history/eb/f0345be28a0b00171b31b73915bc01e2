import java.lang.Math;

public class maxHeap {
	private int[] vertices; //record the vertices
	private int[] values; // record the vertices' value
	private int size = 0;
	
	public maxHeap(graph g) {
		vertices = new int[g.vertices + 1];
		values = new int[g.vertices + 1];
		for (int i = 1; i <= g.vertices; i++){ 
			vertices[i] = 0; 
			values[i] = 0;
		}
	}
	public int Maximum(){
		return vertices[1];
	}
	
	public void insert(int vertex){
		vertices[this.size + 1] = vertex;
		heapify(size + 1);
		size++;
	}
	public void delete(int vertex){
		int position = 0;
//		find the vertex's position, swap it with the last vertex, and delete the last vertex;
		for (int i = 1; i < size + 1; i++){
			if (vertices[i] == vertex){
				position = i;
				vertices[position] = vertices[size];
				vertices[size] = 0; 
				size--;
				break;
			}
		}
//		heapify the vertex in this position
		heapify(position);
	}
	
	public void heapify(int position){
//		move the vertex up or down to the right position
		int upper = position / 2;
		int down;
		if (values[vertices[position * 2]] >= values[vertices[position * 2 + 1]]){
			down = position * 2;
		}else{
			down = position * 2 + 1;
		
		if (values[vertices[upper]] <= values[vertices[position]]){
			int temp = vertices[upper];
			vertices[upper] = vertices[position];
			vertices[position] = temp;
			heapify(upper);
			
		}else if (values[vertices[position * 2]] >= values[vertices[position * 2 + 1]]){
			down = position * 2;
			int temp = vertices[upper];
			vertices[upper] = vertices[position];
			vertices[position] = temp;
			heapify(upper);
		}
		
	}
	private void swap (int position1, int position2){
		int temp = vertices[position1];
		vertices[position1] = vertices[position2];
		vertices[position2] = temp;
	}
	}
}
	
